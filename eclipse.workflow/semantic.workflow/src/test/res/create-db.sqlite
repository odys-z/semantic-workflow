drop table oz_workflow;
CREATE TABLE oz_workflow (
  wfId varchar(50) NOT NULL,
  wfName varchar(50) NOT NULL,
  bussTable varchar(20) NOT NULL, -- e.g. task
  bRecId varchar(50) NOT NULL , -- e.g. task.taskId,
  bStateRef varchar(20) DEFAULT NULL , -- task.state (node instance id ref in business table),
  bussCateCol varchar(20) DEFAULT NULL , -- cate id in business table, e.g. task.tasktype.  The value is one of ir_workflow.wfId.,
  node1 varchar(50) NOT NULL , -- start node id in ir_wfdef,
  backRefs varchar(200) DEFAULT NULL , -- node instance back reference to business task record pk, format [node-id]:[business-col],
  sort int(11) DEFAULT NULL,
  PRIMARY KEY (wfId)
);

CREATE TABLE oz_wfnodes (
  wfId varchar(50) NOT NULL,
  nodeId varchar(50) NOT NULL,
  nodeName varchar(20) DEFAULT NULL,
  nodeCode varchar(20) DEFAULT NULL,
  arrivCondit varchar(200) DEFAULT NULL, -- '[TODO] previous node list. If not null, all previous node handlered can reach here . EX: a01 AND (a02 OR a03)',
  timeoutRoute varchar(500) NULL, -- 'timeout-node-id:(optional)event-handler(implement ICheapEventHandler)',
  timeouts int(11) DEFAULT NULL, -- 'timeout minutes',
  onEvents varchar(200) DEFAULT NULL,
  PRIMARY KEY (nodeId)
);

/* CREATE TABLE oz_wfrole (
-- deprecated
  wfId varchar(50) DEFAULT NULL,
  nodeId varchar(50) NOT NULL,
  roleId varchar(50) NOT NULL,
  PRIMARY KEY (nodeId,roleId)
);
drop TABLE oz_wfrole;
*/

drop table oz_wfcmds;
CREATE TABLE oz_wfcmds (
-- workflow commnads
  nodeId varchar(20) NOT NULL, -- fkIns: oz_wfnodes.nodeId
  cmd varchar(20) NOT NULL, -- command / req id
  txt varchar(50), -- readable command text
  route varchar(20) NOT NULL, -- route: next nodeId for cmd
  sort int default 0,
  PRIMARY KEY (cmd)
);

-- drop table task_states;
CREATE TABLE task_nodes (
-- work flow node instances
  instId varchar(20) NOT NULL,
  nodeId varchar(20) NOT NULL, -- node FK
  oper varchar(20) NOT NULL,
  opertime DATETIME,
  remarks varchar(2000),
  handlingCmd varchar(10),
  prevRec varchar(20),
  PRIMARY KEY (instId)
);

CREATE TABLE tasks (
-- business task
  taskId varchar(20) NOT NULL,
  wfId varchar(20) NOT NULL,
  wfState varchar(20) NOT NULL,
  oper varchar(20) NOT NULL,
  opertime DATETIME,
  remarks varchar(2000),
  startNode varchar(10),
  rquireAllStep varchar(20),
  PRIMARY KEY (taskId)
);

CREATE TABLE task_details (
-- business task details, update / insert details batch commit submitted by cheap engine.
  taskId varchar(20) NOT NULL,
  recId varchar(20) NOT NULL,
  remarks varchar(200),
  PRIMARY KEY (recId)
);

delete from oz_workflow;
insert into oz_workflow (wfId, wfName, bussTable, bRecId, bStateRef, bussCateCol, node1, backRefs, sort)
values ('t01', 'workflow 01', 'tasks', 'taskId', 'wfState', 'wfId', 'startNode', 't01.03:requireAllStep', '0');
delete from oz_wfnodes;
insert into oz_wfnodes( wfId, nodeId, nodeName, nodeCode,  
	arrivCondit, timeoutRoute, timeouts, onEvents )
values
('t01', 't01.01', 'starting', 't01.01',  
	null, null, null, 'io.dosyz.sworkflow.CheapHandler'),
('t01', 't01.02A', 'plan A', 't01.02A',
	null, 't03:Time Out', 15, 'io.dosyz.sworkflow.CheapHandler'),
('t01', 't01.02B', 'plan B', 't01.02B',
	null, 't03:Time Out', 25, 'io.dosyz.sworkflow.CheapHandler'),
('t01', 't01.03', 'abort', 't01.03',
	't01.02 AND t01.02B', null, null, 'io.dosyz.sworkflow.CheapHandler'),
('t01', 't01.04', 'finished', 't01.04',
	null, null, null, 'io.dosyz.sworkflow.CheapHandler')
;
select * from oz_wfnodes;

delete from oz_wfcmds;
insert into oz_wfcmds (nodeId, cmd, txt, route, sort)
values
('t01.01',  't01.01.stepA', 'Go A(t01.02A)', 't01.02A', 0),
('t01.01',  't01.01.stepB', 'Go B(t01.02B)', 't01.02B', 1),
('t01.02A', 't01.02.go03',  'A To 03',       't01.03', 2),
('t01.02B', 't01.02B.go03', 'B To 03',       't01.03', 3),
('t01.03',  't01.03.go-end','03 Go End',     't01.04', 9)
;
