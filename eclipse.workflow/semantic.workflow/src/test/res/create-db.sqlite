CREATE TABLE oz_autoseq (
  sid text(50),
  seq INTEGER,
  remarks text(200),
  CONSTRAINT oz_autoseq_pk PRIMARY KEY (sid) );
  
CREATE TABLE a_logs (
  logId text(20),
  funcId text(20),
  funcName text(50),
  oper text(20),
  logTime text(20),
  txt text(4000),
  CONSTRAINT oz_logs_pk PRIMARY KEY (logId));
  
CREATE TABLE oz_workflow (
	wfId varchar(50) NOT NULL,
	wfName varchar(50) NOT NULL,
	instabl varchar(20) NOT NULL, -- node instance's table name
	bussTable varchar(20) NOT NULL, -- e.g. task
	bRecId varchar(50) NOT NULL , -- e.g. task.taskId,
	bStateRef varchar(20) DEFAULT NULL , -- task.state (node instance id ref in business table),
	bussCateCol varchar(20) DEFAULT NULL , -- cate id in business table, e.g. task.tasktype.  The value is one of ir_workflow.wfId.,
	node1 varchar(50) NOT NULL , -- start node id in ir_wfdef,
	backRefs varchar(200) DEFAULT NULL , -- node instance back reference to business task record pk, format [node-id]:[business-col],
	sort int(11) DEFAULT NULL,
	PRIMARY KEY (wfId) );

CREATE TABLE oz_wfnodes (
	wfId varchar(50) NOT NULL,
	nodeId varchar(50) NOT NULL,
	sort int default 1,
	nodeName varchar(20) DEFAULT NULL,
	nodeCode varchar(20) DEFAULT NULL,
	arrivCondit varchar(200) DEFAULT NULL, -- '[TODO] previous node list. If not null, all previous node handlered can reach here . EX: a01 AND (a02 OR a03)',
	cmdRights varchar(2000), -- rights view sql, args: $1s current id, $2s next id, $3s uid, $4s cmd (oz_wfnodes.cmd)
	timeoutRoute varchar(500) NULL, -- 'timeout-node-id:handled-text:(optional)event-handler(implement ICheapEventHandler)',
	timeouts int(11) DEFAULT NULL, -- 'timeout minutes',
	nonEvents varchar(200) DEFAULT NULL, -- the envent handler's class name
	PRIMARY KEY (nodeId) );

CREATE TABLE oz_wfcmds (
-- workflow commnads
	nodeId varchar(20) NOT NULL, -- fkIns: oz_wfnodes.nodeId
	cmd varchar(20) NOT NULL, -- command / req id
	rightFilter varchar(20),
	txt varchar(50), -- readable command text
	route varchar(20) NOT NULL, -- route: next nodeId for cmd
	sort int default 0,
	PRIMARY KEY (cmd) );

CREATE TABLE task_nodes (
-- work flow node instances, table name is configured in oz_workflow.instabl (separating table for performance)
	instId varchar(20) NOT NULL,
	nodeId varchar(20) NOT NULL, -- node FK
	oper varchar(20) NOT NULL,
	opertime DATETIME,
	descpt varchar(200),
	remarks varchar(2000),
	handlingCmd varchar(10),
	prevRec varchar(20),
	PRIMARY KEY (instId) );

CREATE TABLE tasks (
-- business task
	taskId varchar(20) NOT NULL,
	wfId varchar(20) NOT NULL,
	wfState varchar(20) NOT NULL,
	oper varchar(20) NOT NULL,
	opertime DATETIME,
	remarks varchar(2000),
	startNode varchar(10),
	rquireAllStep varchar(20),
	PRIMARY KEY (taskId) );

CREATE TABLE task_details (
-- business task details, update / insert details batch commit submitted by cheap engine.
	taskId varchar(20) NOT NULL,
	recId varchar(20) NOT NULL,
	remarks varchar(200),
	PRIMARY KEY (recId) );
	
CREATE TABLE task_rights (
-- user's workflow rights configuration.
-- Engine use workflow-meta.xml/rights-ds/sql to find user's rights.
	wfId varchar(20),
	nodeId varchar(20) NOT NULL,
	userId varchar(20) NOT NULL, -- It's more commonly using role id here. Using user id here for simplifying testing.
	cmdFilter varchar(20)
);

insert into oz_workflow (wfId, wfName, instabl, bussTable, bRecId, bStateRef, bussCateCol, node1, backRefs, sort)
values ('t01', 'workflow 01', 'task_nodes', 'tasks', 'taskId', 'wfState', 'wfId', 't01.01', 't01.01:startNode,t01.03:requireAllStep', '0');

insert into oz_wfnodes( wfId, nodeId, sort, nodeName, nodeCode,  
	arrivCondit, cmdRights, timeoutRoute, timeouts, nonEvents )
values
('t01', 't01.01', 10, 'starting', 't01.01',  
null, 'ds-allcmd', null, null, 'io.odysz.sworkflow.CheapHandler'),
('t01', 't01.02A', 20, 'plan A', 't01.02A',
null, 'ds-allcmd', 't03:Time Out:', 15, 'io.odysz.sworkflow.CheapHandler'),
('t01', 't01.02B', 30, 'plan B', 't01.02B',
null, 'ds-allcmd', 't03:Time Out:', 25, 'io.odysz.sworkflow.CheapHandler'),
('t01', 't01.03', 90, 'abort', 't01.03',
't01.02 AND t01.02B', 'ds-v1', null, null, 'io.odysz.sworkflow.CheapHandler'),
('t01', 't01.04', 99, 'finished', 't01.04',
null, 'ds-allcmd', null, null, 'io.odysz.sworkflow.CheapHandler');

insert into oz_wfcmds (nodeId, cmd, rightFilter, txt, route, sort)
values
('t01.01',  't01.01.stepA', 'a', 'Go A(t01.02A)', 't01.02A', 0),
('t01.01',  't01.01.stepB', 'b', 'Go B(t01.02B)', 't01.02B', 1),
('t01.02A', 't01.02.go03',  'a', 'A To 03',       't01.03', 2),
('t01.02B', 't01.02B.go03', 'a', 'B To 03',       't01.03', 3),
('t01.03',  't01.03.go-end','a', '03 Go End',     't01.04', 9);

insert into task_rights (wfId, nodeId, userId, cmdFilter)
values
('t01', 't01.01', 'CheapApiTest', 'a'),
('t01', 't01.02A', 'CheapApiTest', 'a'),
('t01', 't01.02B', 'CheapApiTest', 'a'),
('t01', 't01.03', 'CheapApiTest', 'a')
;

insert into oz_autoseq (sid, seq, remarks) values
('a_logs.logId', 0, 'log'),
('task_nodes.instId', 64, 'node instances'),
('tasks.taskId', 0, 'tasks'),
('task_details.recId', 128, 'task details') ;


select * from oz_workflow;
select * from oz_wfnodes;
select * from oz_wfcmds;
select * from task_rights;
select * from task_nodes;
select * from tasks;
select * from task_details;

